import psutil           # Sistem kaynaklarÄ±nÄ± almak iÃ§in
import schedule         # Zamanlama yapmak iÃ§in
import time             # Uyku (bekleme) fonksiyonu iÃ§in
import smtplib          # SMTP protokolÃ¼ ile mail gÃ¶ndermek iÃ§in
from email.mime.text import MIMEText         # E-posta iÃ§eriÄŸi oluÅŸturmak iÃ§in
from email.mime.multipart import MIMEMultipart # Ã‡oklu iÃ§erik iÃ§in (text + html vb.)


# SMTP sunucu ayarlarÄ± (Ethereal test hesabÄ± bilgileri)
SMTP_SERVER = "smtp.ethereal.email"  
SMTP_PORT = 587
SMTP_USER = "juana.yost68@ethereal.email"
SMTP_PASS = "8bC8QzFQSatKvbrU6X"

# GÃ¶nderen ve alÄ±cÄ± e-posta adresleri
FROM_EMAIL = SMTP_USER
TO_EMAIL = "elif772017@gotmail.com"  # Raporun gÃ¶nderileceÄŸi mail adresi


# Sistem kaynaklarÄ±nÄ± Ã¶lÃ§en fonksiyon
def get_system_info():
    # CPU kullanÄ±m yÃ¼zdesini 1 saniye aralÄ±kla Ã¶lÃ§
    cpu = psutil.cpu_percent(interval=1)
    # RAM bilgilerini al
    memory = psutil.virtual_memory()
    # Disk kullanÄ±m bilgilerini al (ana dizin /)
    disk = psutil.disk_usage('/')

    # Bilgileri okunabilir formatta hazÄ±rla
    info = f"""
    SYSTEM RESOURCE USAGE

    CPU Usage: {cpu}%
    RAM Usage: {memory.percent}% (Used: {memory.used / (1024 ** 3):.2f} GB / Total: {memory.total / (1024 ** 3):.2f} GB)
    Disk Usage: {disk.percent}% (Used: {disk.used / (1024 ** 3):.2f} GB / Total: {disk.total / (1024 ** 3):.2f} GB)
    """
    return info

# E-posta gÃ¶nderme fonksiyonu
def send_email(subject, body):
    # E-posta mesajÄ±nÄ± oluÅŸtur (gÃ¶nderen, alÄ±cÄ±, konu)
    msg = MIMEMultipart()
    msg["From"] = FROM_EMAIL
    msg["To"] = TO_EMAIL
    msg["Subject"] = subject

    # Mesaj gÃ¶vdesini ekle 
    
    msg.attach(MIMEText(body, "plain"))

    try:
        # SMTP sunucusuna baÄŸlan
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        # BaÄŸlantÄ±yÄ± TLS ile gÃ¼venli hale getir
        server.starttls()
        # SMTP sunucusunda oturum aÃ§ (kullanÄ±cÄ± adÄ± + parola)
        server.login(SMTP_USER, SMTP_PASS)
        # E-postayÄ± gÃ¶nder
        server.send_message(msg)
        # BaÄŸlantÄ±yÄ± kapat
        server.quit()
        print("E-posta baÅŸarÄ±yla gÃ¶nderildi.")
    except Exception as e:
        # Hata olursa ekrana yazdÄ±r
        print("E-posta gÃ¶nderilemedi:", str(e))

# 5 dakikada bir Ã§alÄ±ÅŸacak gÃ¶rev
def job():
    print("Sistem kaynaklarÄ± kontrol ediliyor...")
    info = get_system_info()                  # Sistem bilgisini al
    send_email("ğŸ”” Sistem Kaynak Raporu", info)  # E-posta gÃ¶nder

# Her 5 dakikada bir job fonksiyonunu planla
schedule.every(5).minutes.do(job)

print("Servis baÅŸlatÄ±ldÄ±. Her 5 dakikada bir sistem raporu gÃ¶nderilecek.")

# Sonsuz dÃ¶ngÃ¼ - program Ã§alÄ±ÅŸtÄ±ÄŸÄ± sÃ¼rece devam eder
while True:
    schedule.run_pending()  # ZamanÄ± gelmiÅŸ iÅŸleri Ã§alÄ±ÅŸtÄ±r
    time.sleep(1)           # CPU kullanÄ±mÄ±nÄ± azaltmak iÃ§in 1 saniye bekle
